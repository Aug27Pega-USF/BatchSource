--ROBIN AVILA CHINOOK LAB
--2.1 SELECT STATEMENTS
--TASK A
SELECT * FROM EMPLOYEE;
--TASK B
SELECT * FROM EMPLOYEE
WHERE LASTNAME = 'King';
--TASK C
SELECT * FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' 
AND  REPORTSTO IS NULL;

--2.2 ORDER BY
--TASK A
SELECT * FROM ALBUM
ORDER BY TITLE dESC;
--TASK B
SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--2.3 INSERT INTO
--TASK A
--I WILL USE COLUMN NAMES ON FIRST INSERT 
--AND SECOND INSERT WILL ONLY BE VALUES
--FOR THE FIRST TASK TO SHOW BOTH WAYS OF DOING IT
--ALL OTHERS WILL BE WITH VALUES ONLY UNLESS I NEED TO USE COLUMNS
INSERT INTO GENRE(GENREID,NAME) VALUES (26,'New Music 1');
INSERT INTO GENRE VALUES (27,'New Music 2');
--TASK B
INSERT INTO EMPLOYEE VALUES(9,'Avila','Robin','IT Intern',6,'28-DEC-78','10-SEP-18','116 Timbercreek Pines Cir.','Winter Garden','Florida','United states','34787','+1 (407) 615-1303','+1 (407) 615-1304','robinavila@ymail.com');
INSERT INTO EMPLOYEE VALUES(10,'Avila','Chris','IT Intern',6,'13-JAN-80','10-SEP-18','116 Timbercreek Pines Cir.','Winter Garden','Florida','United states','34787','+1 (407) 415-1553','+1 (407) 415-1554','chrisavila@gmail.com');
--TASK C
INSERT INTO CUSTOMER VALUES(60,'Bob','Villa','Oracle','150 Coding Ln.','Orlando','Florda','United States','32819','1+ (407) 299-2853',NULL,'binaryvilla@roadrunner.com',5);
INSERT INTO CUSTOMER VALUES(61,'Leach','Robin','Lifestyle Television','1953 Rich-mans rd.','Millbrook','Alabama','United States','36031','1+ (352) 257-8653','(352) 865-5687','richandfamous@yahoo.com',3);

--2.4 UPDATE
--TASK A
UPDATE CUSTOMER
SET FIRSTNAME='Robert',LASTNAME='Walter'
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
--TASK B
UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
--TASK
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
--TASK A
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;
--TASK B
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

--2.7 DELETE
--TASK 
--FIRST PART IS DELETING THE RECORDS FROM INVOICELINE THAT MATCH THE INVOICEID FROM INVOICE THAT MATCH THE CUSTOMERID FROM CUSTOMER WHERE NAME IS NAME
--SECOND IS DELETING THE RECORDS FROM INVOICE THAT MATCH THE CUSTOMERID FROM CUSTOMER WHERE NAME IS NAME
--LAST PART IS FINALLY DELETING THE CUSTOMER RECORD
DELETE FROM INVOICELINE
WHERE INVOICEID IN(
SELECT INVOICEID FROM INVOICE
WHERE CUSTOMERID IN(
SELECT CUSTOMERID FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'));
DELETE FROM INVOICE
WHERE CUSTOMERID IN(
SELECT CUSTOMERID FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter');
DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3.1 SYSTEM DEFINED FUNCTIONS
--TASK A
SELECT TO_CHAR(SYSTIMESTAMP,'HH12:MI:SS') FROM DUAL;
--TASK B
SELECT LENGTH(NAME)FROM MEDIATYPE;

--3.2 SYSTEM DEFIONE AGGREGATE FUNCTIONS
--TASK A
SELECT AVG(TOTAL) FROM INVOICE;
--TASK B
SELECT MAX(UNITPRICE) FROM TRACK;

--3.3 USER DEFINED SCALAR FUNCTIONS
--TASK
SELECT AVG(UNITPRICE) FROM INVOICELINE;

--3.4 USER DEFINED TABLE VALUED FUNCTIONS
--TASK
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE > '31-DEC-1968';

--4.1 BASIC STORED PROCEDURE
--TASK
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEES
(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
S SYS_REFCURSOR;
FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE; --SET ALBU_ID TO WHATEVER DATA TYPE ALBUMID IS
LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_ALL_EMPLOYEES(S);
    LOOP
    FETCH S INTO FIRSTNAME,LASTNAME;
    EXIT WHEN S%NOTFOUND; --BREAK OUT OF THE LOOP WHEN NO MORE ROWS ARE AVAILABLE
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: '||FIRSTNAME||' '||LASTNAME);
END LOOP
CLOSE;
END;
/

--4.2 STORED PROCEDURES INPUR PARAMETERS
--TASK A
CREATE OR REPLACE PROCEDURE UPDATEEMPLYEE(
       E_EMPLOYEEID IN EMPLOYEE.EMPLOYEEID%TYPE,
	   E_LASTNAME IN EMPLOYEE.LASTNAME%TYPE,
       E_FIRSTNAME IN EMPLOYEE.FIRSTNAME%TYPE,
       E_TITLE IN EMPLOYEE.TITLE%TYPE,
       E_REPORTSTO IN EMPLOYEE.REPORTSTO%TYPE,
       E_ADDRESS IN EMPLOYEE.ADDRESS%TYPE,
       E_CITY IN EMPLOYEE.CITY%TYPE,
       E_STATE IN EMPLOYEE.STATE%TYPE,
       E_PHONE IN EMPLOYEE.PHONE%TYPE,
       E_EMAIL IN EMPLOYEE.EMAIL%TYPE)
IS
BEGIN
  UPDATE EMPLOYEE
  SET LASTNAME = E_LASTNAME,
      FIRSTNAME = E_FIRSTNAME,
      TITLE = E_TITLE,
      REPORTSTO = E_REPORTSTO,
      ADDRESS = E_ADDRESS,
      CITY = E_CITY,
      STATE = E_STATE,
      PHONE = E_PHONE,
      EMAIL = E_EMAIL
  WHERE EMPLOYEEID = E_EMPLOYEEID;
  COMMIT;
END;
/
--TASK B




---4.3 STORED PROCEDURES OUTPUT PARAMETERS
--4.3
CREATE OR REPLACE PROCEDURE CUST_COMP
(F OUT SYS_REFCURSOR)
AS
BEGIN
OPEN F FOR
   SELECT COMPANY FROM CUSTOMER WHERE CUSTOMERID LIKE '% Customer %';
END CUST_COMP;
/
DECLARE
F SYS_REFCURSOR;
COMPANY CUSTOMER.COMPANY%TYPE;
BEGIN
    CUST_COMP(F);
    LOOP
    FETCH F INTO COMPANY;
    EXIT WHEN F%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(COMPANY||' COMPANY NAME ');
END LOOP
CLOSE;
END;
/

--5.0 TRANSACTIONS
--TASK A
CREATE OR REPLACE PROCEDURE DELETE_TRANSACTION(
        I_INVOICEID IN INVOICE.INVOICEID%TYPE)
IS
BEGIN
COMMIT;
DELETE FROM INVOICELINE
WHERE INVOICEID IN(
SELECT INVOICEID FROM INVOICE
WHERE I_INVOICEID = INVOICEID);
DELETE FROM INVOICE
WHERE I_INVOICEID = INVOICEID;
COMMIT;
END;
/

--TASK B
CREATE OR REPLACE PROCEDURE INSERT_TRANSACTION
IS
BEGIN
INSERT INTO CUSTOMER 
VALUES(62,'Robin','Avila','Revature','116 Timbercreek pines cir.',
    'Winter Garden','Florida','United States','34787','407-615-1303',
     null,'robinavila@ymail.com',null);
COMMIT;
END;
/


--6.1 AFTER/FOR TRIGGERS
--TASK A
CREATE OR REPLACE TRIGGER INSERT_TRIGGER AFTER INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
BEGIN
INSERT INTO EMPLOYEE VALUES(12,'Last','First','unemployed',1,'15-FEB-75','08-SEP-60','255 ohhh boyyy lane','city','state','mars',00000,null,null,'someemail@gmail.com');
END;
/
--TASK B
CREATE OR REPLACE TRIGGER UPDATE_TRIGGER AFTER UPDATE ON ALBUM
FOR EACH ROW
DECLARE
BEGIN
UPDATE ALBUM SET ARTISTID = 250 WHERE ARTISTID = 100;
END;
/
--TASK C
CREATE OR REPLACE TRIGGER DELETE_TRIGGER
AFTER DELETE ON CUSTOMER
  FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('Customer Deleted!');
END DELETE_TRIGGER;
/
DELETE FROM INVOICELINE
WHERE INVOICEID IN
  (SELECT INVOICEID FROM INVOICE 
  WHERE CUSTOMERID =11);
DELETE FROM INVOICE
  WHERE CUSTOMERID =11;


--7.1 INNER JOINS
--TASK
SELECT CUSTOMER.FIRSTNAME ||' '|| CUSTOMER.LASTNAME AS CUSTOMER_NAME, INVOICE.INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER JOIN
--TASK 
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER 
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT JOIN
--TASK
SELECT ARTIST.NAME,ALBUM.TITLE AS ALBUM_TITLE
FROM ARTIST 
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4 CROSS JOIN
--TASK
SELECT ARTIST.NAME
FROM ARTIST 
CROSS JOIN ALBUM
ORDER BY ARTIST.NAME ASC;

--7.5 SELF JOIN
--TASK
SELECT A.FIRSTNAME||' '||A.LASTNAME AS EMPNAME, B.FIRSTNAME||' '||B.LASTNAME AS REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE B.EMPLOYEEID = A.REPORTSTO;





