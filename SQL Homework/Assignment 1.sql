--2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3
INSERT INTO GENRE (GENREID, NAME) VALUES(26, 'RALEIGHS GREATEST HITS');  
INSERT INTO GENRE (GENREID, NAME) VALUES(27, 'RALEIGHS WORST HITS');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME) VALUES(9, 'CARTER', 'JOHN');  
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME) VALUES(10, 'BRAVO', 'JOHNNY');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME) VALUES(60, 'CASEY', 'JONES');  
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME) VALUES(61, 'JASON', 'VOORHEES');

--2.4
UPDATE CUSTOMER
SET FIRSTNAME = 'Aaron', LASTNAME = 'Mitchell’; 
WHERE FIRSTNAME = 'Robert' , LASTNAME = 'Walter';

UPDATE ARTIST
SET NAME OF ARTIST = ‘CCR’;
WHERE NAME OF ARTIST = 'Creedence Clearwater Revival';

--2.5
SELECT * FROM INVOICES
WHERE BILLING ADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICES
WHERE TOTAL BETWEEN 15 AND 20;

SELECT * FROM EMPLOYEES
WHERE HIRED BETWEEN 1st of June 2003 AND 1st of March 2004;

--2.7
DELETE FROM INVOICELINE
WHERE INVOICEID = ANY(
SELECT INVOICEID FROM INVOICE WHERE CUSTOMER ID = 32;
DELETE FROM CUSTOMER WHERE CUSTOMER ID = 32;
SELECT * FROM CUSTOMER

--3.1
SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') "NOW" FROM DUAL;

SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL) FROM INVOICE;

SELECT * FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);

--3.3
SELECT AVG(UNITPRICE) FROM INVOICELINE;

--3.4
CREATE OR REPLACE TYPE EMP_OBJECT FORCE IS OBJECT(EMP_NAME VARCHAR2(200), YEAR_BORN DATE); /*Create object to store data*/
/
CREATE OR REPLACE TYPE EMPLOYEE_BORN IS TABLE OF EMP_OBJECT;/*Create table to store emp objects*/
/
CREATE OR REPLACE FUNCTION BORN_AFTER_DATE(BIRTHYEAR IN NUMBER)
RETURN EMPLOYEE_BORN AS L_EMPS EMPLOYEE_BORN := EMPLOYEE_BORN();
N INTEGER :=0;
BEGIN
    FOR i IN (SELECT (FIRSTNAME||' '|| LASTNAME) AS EMP_NAME, BIRTHDATE AS BIRTH FROM EMPLOYEE WHERE BIRTHDATE > (TO_DATE(BIRTHYEAR,'YYYY')) )
        LOOP
        L_EMPS.EXTEND(); /*Extend(): Allocates one element space.*/
        N:=N+1;
        L_EMPS(N) :=EMP_OBJECT(i.EMP_NAME,i.BIRTH);
        END LOOP;
    RETURN L_EMPS;
END;
/

SELECT * FROM TABLE(BORN_AFTER_DATE(1968));

--4.1
CREATE OR REPLACE PROCEDURE GET_FULLNAMES
AS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
GO
EXEC GET_FULLNAMES

 
--4.2
CREATE OR REPLACE PROCEDURE  spUpdate EmployeeData
@employeeId INT
AS
BEGIN
UPDATE EMPLOYEE 
SET status='Y' 
WHERE Employee_Code = @employeeID
END
Exec spUpdate EmployeeData  employeeId  
CREATE PROCEDURE spGetManagers
@employeeID INT,
AS
BEGIN
Select managers from employee where employeeID=@ employeeID;
END

 
--4.3
CREATE PROCEDURE spNameCompanyOutputParameter
@employeeID INT,
@result  varchar(50)  OUTPUT
AS
BEGIN
Set result = Select name,country from customer where employeeID= @employeeID ;
END

--5.1
DELETE FROM INVOICE WHERE INVOICEID = ‘invoiceid’;
COMMIT;

CREATE PROCEDURE insert_customer
(IN c_customer_id int(11), IN c_first_name varchar(15), IN c_last_name varchar(15), IN c_order varchar(10))
Begin
Insert into CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, ORDER)
Values (c_customer_id, c_first_name, c_last_name, c_order);
END
GO

--6.1
CREATE OR REPLACE TRIGGER insert_on_employee
AFTER INSERT ON EMPLOYEE
BEGIN
SELECT s.CUSTOMERID FROM CUSTOMER AS c;
INSERT INTO INVOICE
SET CUSTOMERID = s.CUSTOMERID;
END;

CREATE OR REPLACE TRIGGER update_on_album
AFTER UPDATE ON ALBUM
WHEN (new.ALBUMID = ‘AL-101’
BEGIN
SELECT al.ARTISTID FROM ALBUM AS al;
INSERT INTO ARTIST
SET ARTISTID = al.ARTISTID;
END;

CREATE TRIGGER delete_on_customer
AFTER DELETE ON CUSTOMER
BEGIN
SELECT c.CUSTOMERID FROM CUSTOMER AS c;
DELETE FROM INVOICE
WHERE CUSTOMERID = c.CUSTOMERID;
END;

--7.1
SELECT CUSTOMER.FIRSTNAME,  INVOICE.INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT INVOICE.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL  
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID != INVOICE.CUSTOMERID;

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE 
FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4
SELECT * FROM ARTIST
CROSS JOIN ALBUM ORDER BY ARTIST.NAME;

--7.5
SELECT * FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON A.REPORTSTO = B.REPORTSTO;