
SELECT * FROM BANK_USERS;
SELECT * FROM BANK_ACCOUNT;
--CREATE TABLE STRUCTURE FOR JDBC

CREATE TABLE BANK_USERS (
 USER_ID INTEGER PRIMARY KEY NOT NULL,
 USER_NAME VARCHAR2(20) UNIQUE NOT NULL,
 PASS_WORD VARCHAR2(20) NOT NULL,
 FIRST_NAME VARCHAR2(20),
 LAST_NAME VARCHAR2(20),
 CREATION_DATE DATE
);

CREATE TABLE BANK_ACCOUNT (
 BANK_ACCOUNT_ID INTEGER PRIMARY KEY NOT NULL,
 ACCOUNT_NAME VARCHAR2(32) NOT NULL,
 BALANCE INTEGER DEFAULT 0,
 USER_ID INTEGER NOT NULL
);

CREATE TABLE TRANSACTIONS (
 TRANSACTION_ID INTEGER PRIMARY KEY NOT NULL,
 TRANSACTION_TYPE INTEGER NOT NULL, --(created, withdrew, deposited, deleted)
 USER_ID INTEGER NOT NULL,
 BANK_ACCOUNT_ID INTEGER NOT NULL,
 DATE_OF_TRANSACTION DATE
);

CREATE TABLE TRANSACTION_LOOKUP(
  TRANSACTION_TYPE INTEGER UNIQUE NOT NULL,
  TRANSACTION_DESCRIPTION VARCHAR2(32) NOT NULL
);



--ALTER TABLE FOR FORIEGN KEYS
ALTER TABLE BANK_ACCOUNT ADD CONSTRAINT FK_BANK_ACCOUNT_USER_ID
    FOREIGN KEY (USER_ID) REFERENCES BANK_USERS (USER_ID);
    
    
    
--SEQUENCES
CREATE SEQUENCE USER_SEQ
START WITH 1
INCREMENT BY 1
;

CREATE SEQUENCE BANK_ACCOUNT_SEQ
START WITH 1
INCREMENT BY 1
;

CREATE SEQUENCE TRANSACTION_SEQ
START WITH 1
INCREMENT BY 1
;

--CREATE LOOK UP TABLE
INSERT INTO TRANSACTION_LOOKUP VALUES(1, 'Account created');
INSERT INTO TRANSACTION_LOOKUP VALUES(2, 'Withdrawal');
INSERT INTO TRANSACTION_LOOKUP VALUES(3, 'Deposit');
INSERT INTO TRANSACTION_LOOKUP VALUES(4, 'Account removed');

/*
DML STATEMENTS
*/

--INSERTS
CREATE OR REPLACE PROCEDURE INSERT_BANK_USERS (UNAME IN VARCHAR2, PWORD IN VARCHAR2, FNAME IN VARCHAR2, LNAME IN VARCHAR2) AS
    BEGIN
        INSERT INTO BANK_USERS (USER_ID, USER_NAME, PASS_WORD, FIRST_NAME, LAST_NAME, CREATION_DATE) VALUES(USER_SEQ.NEXTVAL, UNAME, PWORD, FNAME, LNAME, SYSDATE);
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_BANK_ACCOUNT (ACCNAME IN VARCHAR2, UID IN INTEGER) AS
    BEGIN
        INSERT INTO BANK_ACCOUNT (BANK_ACCOUNT_ID, ACCOUNT_NAME, USER_ID) VALUES(BANK_ACCOUNT_SEQ.NEXTVAL, ACCNAME, UID);
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_TRANSACTIONS (TRANSACTION_TYPE IN INTEGER, BALANCE IN INTEGER, USER_ID IN INTEGER, BANK_ACCOUNT_ID IN INTEGER) AS
    BEGIN
        INSERT INTO TRANSACTIONS VALUES(TRANSACTION_SEQ.NEXTVAL, TRANSACTION_TYPE, BALANCE, USER_ID, BANK_ACCOUNT_ID, SYSDATE);
        COMMIT;
    END;
/


--DELETES
CREATE OR REPLACE PROCEDURE REMOVE_BANK_USERS (UID IN INTEGER) AS
    BEGIN
        DELETE FROM BANK_ACCOUNT WHERE USER_ID IN ( SELECT USER_ID FROM BANK_USERS WHERE USER_ID = UID); --FIRST REMOVE FORIEGN DEPENDENCIES
        DELETE FROM BANK_USERS WHERE USER_ID = UID;--THEN REMOVE USER
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE REMOVE_BANK_ACCOUNT (AID IN INTEGER) AS
    BEGIN
        DELETE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID = AID;
        COMMIT;
    END;
/


--UPDATES
CREATE OR REPLACE PROCEDURE UPDATE_USER (UID IN INTEGER, FNAME IN VARCHAR2, LNAME IN VARCHAR2) AS
    BEGIN
        UPDATE BANK_USERS SET FIRST_NAME = FNAME, LAST_NAME = LNAME WHERE USER_ID = UID;
        COMMIT;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BANK_ACCOUNT (AID IN INTEGER, BAL IN INTEGER) AS
    BEGIN
        UPDATE BANK_ACCOUNT SET BALANCE = BAL WHERE BANK_ACCOUNT_ID = AID;
        COMMIT;
    END;
/
