CREATE TABLE BEAR(
BEAR_ID INTEGER PRIMARY KEY,
BEAR_TYPE_ID INTEGER,
BEAR_NAME VARCHAR2 (100),
BEAR_BIRTHDATE DATE,
BEAR_WEIGHT INTEGER DEFAULT 200,
CAVE_ID INTEGER
);

CREATE TABLE BEAR_TYPE(
BEAR_TYPE_ID INTEGER PRIMARY KEY,
BEAR_TYPE_NAME VARCHAR2 (100)
);

CREATE TABLE CAVE(
CAVE_ID INTEGER PRIMARY KEY,
CAVE_NAME VARCHAR2 (100),
MAX_BEARS INTEGER DEFAULT 4
);

CREATE TABLE BEEHIVE(
BEEHIVE_ID INTEGER PRIMARY KEY,
BEEHIVE_WEIGHT INTEGER DEFAULT 50
);

CREATE TABLE BEAR_BEEHIVE(
BEAR_ID INTEGER,
BEEHIVE_ID INTEGER,
PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE --Name of constraint
FOREIGN KEY(BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY(BEAR_ID) REFERENCES BEAR(BEAR_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);

ALTER TABLE BEAR
ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE
CHECK(BEAR_WEIGHT>0);

ALTER TABLE BEEHIVE
ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE
CHECK(BEEHIVE_WEIGHT>0);

ALTER TABLE CAVE
ADD CONSTRAINT UQ_CAVE_NAME
UNIQUE(CAVE_NAME);

ALTER TABLE BEAR_TYPE
ADD CONSTRAINT UQ_TYPE_NAME
UNIQUE(BEAR_TYPE_NAME);

INSERT INTO BEAR_TYPE VALUES(1, 'GRIZZLY');
INSERT INTO BEAR_TYPE VALUES(2, 'POLAR');
INSERT INTO BEAR_TYPE VALUES(3, 'PANDA');

INSERT INTO BEAR VALUES(1,2, 'HARAMBZ', '17-JUL-1985', DEFAULT, NULL);
INSERT INTO BEAR VALUES(2,3, 'CEDRIC', '5-NOV-1962', DEFAULT, NULL);

--SEQUENCES

CREATE SEQUENCE SQ_BEAR_PK
START WITH 5
INCREMENT BY 2;

CREATE SEQUENCE SQ_BEAR_TYPE_PK
START WITH 5
INCREMENT BY 3;

CREATE SEQUENCE SQ_CAVE_PK
START WITH 5
INCREMENT BY 2;

CREATE SEQUENCE SQ_BEEHIVE_PK
START WITH 5
INCREMENT BY 2;

--TRIGGERS

CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
    SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
END;
/
-- OR PUT THE NAME OF THE TRIGGER BETWEEN END AND ";"

CREATE OR REPLACE TRIGGER TR_INSERT_BEAR_TYPE
BEFORE INSERT ON BEAR_TYPE
FOR EACH ROW
BEGIN  
    SELECT SQ_BEAR_TYPE_PK.NEXTVAL INTO :NEW.BEAR_TYPE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_CAVE
BEFORE INSERT ON CAVE
FOR EACH ROW
BEGIN
 SELECT SQ_CAVE_PK.NEXTVAL INTO :NEW.CAVE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BEEHIVE
BEFORE INSERT ON BEEHIVE
FOR EACH ROW
BEGIN
 SELECT SQ_BEEHIVE_PK.NEXTVAL INTO :NEW.BEEHIVE_ID FROM DUAL;
END;
/

--USE TRIGGER!
INSERT INTO CAVE(CAVE_NAME,MAX_BEARS) VALUES('AWESOMECAVE1', DEFAULT);
INSERT INTO CAVE(CAVE_NAME,MAX_BEARS) VALUES('SADCAVE', 1);

INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (DEFAULT);
INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (75);
INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (10);

INSERT INTO BEAR
(BEAR_TYPE_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, CAVE_ID)
VALUES (3, 'CYNTHIA', '5-NOV-1912', 500, 5);

/*
SELECT * FROM BEAR;

TRUNCATE TABLE BEAR_TYPE; --Doesn't work because of the foreign keys

DROP TABLE BEAR_BEEHIVE;
DROP TABLE BEEHIVE;
DROP TABLE BEAR;
DROP TABLE BEAR_TYPE;
DROP TABLE CAVE;
*/