--CREATE A SEQUENCE
/*
CREATE OR REPLACE [SEQUNCE NAME]
MINVALUE[VALUE]
MAXVALUE[VALUE]
START WITH[VALUE]
INCREMENT BY [VALUE]
CACAHE [VALUE];
*/
CREATE SEQUENCE MYTESTSEQ
MINVALUE 100
MAXVALUE 10000
START WITH 5000
INCREMENT BY -5
CACHE 20;

SELECT MYTESTSEQ.NEXTVAL FROM DUAL;
--INSERT INTO STUDENT(ID, NAME, SCOOL_ID) VALUES (MYTESTSEQ.NEXTVAL, BOBBY, 134);

--A VIEW TO A KILL
--A VIEW IS A SAVED SELECT STATEMENT(BASICALLY)
CREATE OR REPLACE VIEW  MYVIEW 
AS SELECT TITLE AS STUFF FROM ALBUM
UNION 
SELECT NAME FROM ARTIST;

SELECT STUFF FROM MYVIEW
WHERE STUFF LIKE 'T%';-- LIKE OR STARTS WITH T

SELECT * FROM MYVIEW;

--INDEX APPLY TO A COLUMN TO SPEED UP SEARCH BY ENFORCING A PHYSICAL 
--IN-MEMORY ORDEER OF ROWS
--SEARCHES BECOME FASTER, BUT INSERT AND DELETE ARE SLOWED DOWN
--UNIQUE, PK AND FK CONSTRAINTS IMPLICITLY GENERATE INDEXS
CREATE INDEX MYNEWINDEX
ON ALBUM(ARTISTID); -- OR ASC

/*CURSORS
VIEW STORED IN A LOCAL VARIABE 
A POINTER TO A SECTION OF A TABLE/RESULT SET
IT MUST BE OPENED IT CAN BE LOOPED THROUGH
IT MUST BE CLOSED IF OPENED 
EVERY SQL STATEMENT GENERATE A CURSOR- ALLOWS PL/SQL 
TO INTERACT W/ SQL
*IMPLICIT CURSORS*
-DQL
SELECT * FROM POKEMON;
-SYSTEM REFERENCE CURSORS ARE ALREADY THERE FOR USE
*EXPLICIT CURSORS* 
CUR S = SELECT * FROM POKEMON;
SELECT ID FROM S;
GOOD FOR FORMATTING OUR OUTPUT
*/
