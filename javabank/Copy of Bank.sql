DROP TABLE ALGPARAMETERS;
DROP TABLE BANK_ACCOUNT;
DROP TABLE BANK_USER;
/*password stuff*/

set serveroutput on;
CREATE TABLE ALGPARAMETERS
(
  NAME   VARCHAR2(100 BYTE),
  VALUE  NVARCHAR2(100),
  CONSTRAINT PK_ALG PRIMARY KEY(NAME)
);
INSERT INTO ALGPARAMETERS
   SELECT 'key' NAME,
          RAWTOHEX ('ntFKw08l59oiAnigrSouvfrO') VALUE
     FROM DUAL
   UNION
   SELECT 'iv' NAME, RAWTOHEX ('c0zNhdKx') VALUE FROM DUAL;
COMMIT;
SELECT * FROM ALGPARAMETERS;

CREATE OR REPLACE FUNCTION F_ENCRYPT (p_input VARCHAR2)
   RETURN VARCHAR2
AS
   v_encrypted_raw     RAW (2000);
   v_key               RAW (320);
   v_encryption_type   PLS_INTEGER
      :=   DBMS_CRYPTO.DES_CBC_PKCS5;
   v_iv                RAW (320);
BEGIN
   SELECT VALUE
     INTO v_key
     FROM algparameters
    WHERE name = 'key';
   SELECT VALUE
     INTO v_iv
     FROM algparameters
    WHERE name = 'iv';
   v_encrypted_raw :=
      DBMS_CRYPTO.encrypt (src   => UTL_I18N.STRING_TO_RAW (p_input, 'AL32UTF8'),
                           typ   => v_encryption_type,
                           key   => v_key,
                           iv    => v_iv);
   RETURN UTL_RAW.CAST_TO_VARCHAR2 (UTL_ENCODE.base64_encode (v_encrypted_raw));
END;
/

CREATE OR REPLACE FUNCTION F_DECRYPT (p_input VARCHAR2)
   RETURN VARCHAR2
AS
   v_decrypted_raw     RAW (2000);
   v_key               RAW (320);
   v_encryption_type   PLS_INTEGER := DBMS_CRYPTO.DES_CBC_PKCS5;
   v_iv                RAW (320);
BEGIN
   SELECT VALUE
     INTO v_key
     FROM algparameters
    WHERE name = 'key';
   SELECT VALUE
     INTO v_iv
     FROM algparameters
    WHERE name = 'iv';
   v_decrypted_raw :=
      DBMS_CRYPTO.DECRYPT (
         src   => UTL_ENCODE.base64_decode (UTL_RAW.CAST_TO_RAW (p_input)),
         typ   => v_encryption_type,
         key   => v_key,
         iv    => v_iv);
   RETURN UTL_I18N.RAW_TO_CHAR (v_decrypted_raw, 'AL32UTF8');
END;
/

/*bank_user*/

CREATE TABLE BANK_USER(
    USER_ID NUMBER NOT NULL,
    USER_TYPE VARCHAR2(1) DEFAULT 'C',
    USERNAME VARCHAR2(16) NOT NULL,
    PASSWORD_HASH VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_USER PRIMARY KEY (USER_ID),
    CONSTRAINT UNI_USERNAME UNIQUE (USERNAME)
);

CREATE TABLE BANK_ACCOUNT(
    USER_ID NUMBER NOT NULL,
    BANK_ACCOUNT_ID NUMBER NOT NULL,
    BALANCE NUMERIC(15,2) DEFAULT 0.00,
    CONSTRAINT PK_BANK_ACCOUNT PRIMARY KEY (BANK_ACCOUNT_ID),
    CONSTRAINT POSITIVE_BALANCE CHECK (BALANCE>=0),
    CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES BANK_USER(USER_ID) ON DELETE CASCADE
);

/*An unregistered user can register by creating a username and password */
/*An Admin can create all users.*/
CREATE OR REPLACE PROCEDURE INSERT_BANK_USER(IUSER_ID IN NUMBER, IUSERNAME IN VARCHAR2, IPASSWORD IN VARCHAR2) AS
BEGIN
    INSERT INTO BANK_USER (USER_ID, USERNAME, PASSWORD_HASH) VALUES (IUSER_ID, IUSERNAME, F_ENCRYPT(IPASSWORD));
    COMMIT;
END;
/


/*A registered user can login with their username and password*/
CREATE OR REPLACE FUNCTION LOGIN(IUSERNAME VARCHAR2, IPASSWORD VARCHAR2)
RETURN NUMBER AS IUSER_ID NUMBER; 
DECRYPTED VARCHAR2(50);
BEGIN
    DECRYPTED:=F_ENCRYPT(IPASSWORD);
    SELECT USER_ID INTO IUSER_ID FROM BANK_USER WHERE USERNAME=IUSERNAME AND PASSWORD_HASH=DECRYPTED;
    RETURN IUSER_ID;
END;
/


INSERT INTO BANK_USER (USER_ID, USERNAME, PASSWORD_HASH,USER_TYPE) VALUES (1, 'ADMIN', F_ENCRYPT('TEMPPASS'),'A');
EXEC INSERT_BANK_USER(231353,  'JOE4', 'SPINACH@2');
EXEC INSERT_BANK_USER(323411,'JANE5', 'FEV8333??');
EXEC INSERT_BANK_USER(323413,'JANE5', 'FEV8333??');
EXEC INSERT_BANK_USER(111111,'ALPHA1', 'IAMNUMBER1');
EXEC INSERT_BANK_USER(123456,'RICH','TURNER');
EXEC INSERT_BANK_USER(123457,'RICH2','Turner');
EXEC INSERT_BANK_USER(123444,'RICH4','RICHARD TURNER');
SELECT LOGIN('RICH4','RICHARD TURNER') FROM DUAL;


/*A user can create an account.*/
CREATE OR REPLACE PROCEDURE INSERT_BANK_ACCOUNT(IUSER_ID IN NUMBER, IBANK_ACCOUNT_ID IN NUMBER) AS 
BEGIN 
    INSERT INTO BANK_ACCOUNT(USER_ID, BANK_ACCOUNT_ID) VALUES (IUSER_ID, IBANK_ACCOUNT_ID);
    COMMIT;
END;
/

EXEC INSERT_BANK_ACCOUNT(111111,111111);

/*A user can delete an account if it is empty.  */
CREATE OR REPLACE PROCEDURE DELETE_EMPTY_BANK_ACCOUNT(IBANK_ACCOUNT_ID IN NUMBER, IUSER_ID IN NUMBER) AS
BEGIN
    DELETE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID=IBANK_ACCOUNT_ID AND BALANCE=0 AND USER_ID=IUSER_ID;
    COMMIT;
    END;
/

EXEC INSERT_BANK_ACCOUNT(323411,999999);
CALL DELETE_EMPTY_BANK_ACCOUNT(999999);

/*An Admin can delete all users.*/
CREATE OR REPLACE PROCEDURE DELETE_USER(IUSER_ID IN NUMBER) AS
BEGIN
    IF IUSER_ID != 1 THEN 
    DELETE FROM BANK_USER WHERE USER_ID=IUSER_ID;
    END IF;
    COMMIT;
    END;
/

/*An Admin can update all users.*/
CREATE OR REPLACE PROCEDURE UPDATE_BANK_USER(IUSER_ID IN NUMBER, IUSERNAME IN VARCHAR2, IPASSWORD IN VARCHAR2) AS
BEGIN
    IF IUSER_ID != 1 THEN
    UPDATE BANK_USER SET USERNAME=IUSERNAME, PASSWORD_HASH = F_ENCRYPT(IPASSWORD) WHERE USER_ID=IUSER_ID;
    END IF;
    COMMIT;
END;
/

call update_bank_user(1234422, 'RICHTHECHIEF', '123456789');

/*A user can add to or withdraw from an account.*/
CREATE OR REPLACE PROCEDURE DEPOSIT(IAMOUNT IN NUMERIC, IBANK_ACCOUNT_ID IN NUMBER, IUSER_ID IN NUMBER) AS
BEGIN
    UPDATE BANK_ACCOUNT SET BALANCE = (SELECT BALANCE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID=IBANK_ACCOUNT_ID)+IAMOUNT WHERE BANK_ACCOUNT_ID=IBANK_ACCOUNT_ID AND USER_ID=IUSER_ID;
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE WITHDRAW(IAMOUNT IN NUMERIC, IBANK_ACCOUNT_ID IN NUMBER, IUSER_ID IN NUMBER) AS
BEGIN
    UPDATE BANK_ACCOUNT SET BALANCE = (SELECT BALANCE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID=IBANK_ACCOUNT_ID)-IAMOUNT WHERE BANK_ACCOUNT_ID=IBANK_ACCOUNT_ID AND USER_ID=IUSER_ID;
    COMMIT;
END;
/

/*A user can view their own existing accounts and balances.*/
CREATE OR REPLACE PACKAGE types
AS
    TYPE ref_cursor IS REF CURSOR;
END;
/

CREATE OR REPLACE PROCEDURE VIEW_ACCOUNTS(IUSER_ID IN NUMBER) as name_cursor types.ref_cursor;
USER_NAME VARCHAR2(16);
begin
    open name_cursor for
        select BANK_ACCOUNT_ID, BALANCE from BANK_ACCOUNT WHERE USER_ID=IUSER_ID ORDER BY BANK_ACCOUNT_ID;
        dbms_sql.return_result(na_cursor);
     end;
    /
    
    
SELECT USER_ID FROM BANK_USER WHERE USERNAME='Richard';
SELECT BALANCE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID=999999;
call DEPOSIT(1.11,111111);
call DEPOSIT(1.11,111111);
EXEC WITHDRAW(1.12,111111);
EXEC VIEW_ACCOUNTS(111111);