--2.1 SELECT
-- preforming select queries on the employee table
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME ='Andrew' and REPORTSTO is NULL;
-- 2.2 Order BY
SELECT * FROM ABLUM ORDER BY ALBUM.TITL DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY DESC;

--2.3 INSERT INTO
-- Insert two new records into genre table
INSERT INTO GENRE (GENREID, NAME)
VALUES (26, 'Salsa');
INSERT INTO GENRE (GENREID, NAME)
VALUES (27, 'Merengue');
-- Insert two new records into employee 
INSERT INTO employee(employeeid,lastname,firstname)
values(9,'Rivera','Luis');
INSERT INTO employee(employeeid,lastname,firstname)
values(10,'Medera','Kevin');
--Insert two new records into customer
INSERT INTO customer(customerid,firstname,lastname,email,supportrepid) 
values(123123123,'Sanchez','Bob','bobsanchez@gmail.com',2);
INSERT INTO customer(customerid,firstname,lastname,email,supportrepid) 
values(2242422,'Sanchez','mary','mary@gmail.com',2);

--2.4 UPDATE
UPDATE customer
set firstname = 'Robert', lastname = 'Walter'
where firstname='Aaron' and lastname = 'Mitchell';
UPDATE artist
set name = 'CCR'
where name = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM invoice where billingaddress like 'T%';
--2.6 BETWEEN
SELECT * FROM invoice where total between 15 and 50;
SELECT * FROM employee where hiredate 
between '01-JUN-03' and '01-MAR-04';

--2.7 DELETE
DELETE FROM INVOICELINE
WHERE INVOICEID IN (
SELECT INVOICEID FROM INVOICE 
      WHERE CUSTOMERID IN (
           SELECT CUSTOMERID FROM CUSTOMER
                WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'));               
DELETE FROM INVOICE 
WHERE CUSTOMERID IN (
SELECT CUSTOMERID FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter');

delete from CUSTOMER
where FIRSTNAME='Robert' AND LASTNAME='Walter';

-- 3. SQL FUNCTIONS
--3.1 SYSTEM DEFINED FUNCTIONS
SELECT TO_CHAR
    (SYSDATE, 'MM-DD-YYYY HH24:MI:SS') "NOW"
     FROM DUAL;
--GET LENGTH FUNCTION
CREATE OR REPLACE FUNCTION GETLENGTH
( M_ID NUMBER)
RETURN  NUMBER IS
MLENGTH NUMBER(10) := 0;
BEGIN
    SELECT LENGTH(MEDIATYPE.NAME) 
    INTO MLENGTH
    FROM MEDIATYPE
    WHERE MEDIATYPEID = M_ID;
    RETURN MLENGTH;
END;
/
SELECT GETLENGTH(3) FROM DUAL;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
-- FUNCTION TO RETURN AVG TOTAL
CREATE OR REPLACE FUNCTION AVG_TOTAL
RETURN NUMBER AS AVG_TOTAL NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVG_TOTAL
    FROM INVOICE;
    RETURN AVG_TOTAL;
END;
/
SELECT AVG_TOTAL FROM DUAL;

CREATE OR REPLACE FUNCTION MAX_PRICE
RETURN NUMBER AS MAX_PRICE NUMBER;
BEGIN 
    SELECT MAX(UNITPRICE) INTO MAX_PRICE
    FROM TRACK;
    RETURN MAX_PRICE;
END;
/
SELECT MAX_PRICE FROM DUAL;
--3.3 User Defined Scalar Functions
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN NUMBER AS AVG_PRICE NUMBER;
BEGIN
   SELECT AVG(UNITPRICE) INTO AVG_PRICE 
   FROM INVOICELINE;
   RETURN AVG_PRICE;
END;
/
SELECT AVG_INVOICELINE FROM DUAL;

--3.4 USER DEFINED TABLE VALUE FUNCTIONS
CREATE OR REPLACE TYPE EMP_OBJECT FORCE IS OBJECT(EMP_NAME VARCHAR2(200), YEAR_BORN DATE); /*Create object to store data*/
/
CREATE OR REPLACE TYPE EMPLOYEE_BORN IS TABLE OF EMP_OBJECT;/*Create table to store emp objects*/
/
CREATE OR REPLACE FUNCTION BORN_AFTER_DATE(BIRTHYEAR IN NUMBER)
RETURN EMPLOYEE_BORN AS L_EMPS EMPLOYEE_BORN := EMPLOYEE_BORN();
N INTEGER :=0;
BEGIN
    FOR i IN (SELECT (FIRSTNAME||' '|| LASTNAME) AS EMP_NAME, BIRTHDATE AS BIRTH 
    FROM EMPLOYEE 
    WHERE BIRTHDATE > (TO_DATE(BIRTHYEAR,'YYYY')) )
        LOOP
        L_EMPS.EXTEND(); /*Extend(): Allocates one element space.*/
        N:=N+1;
        L_EMPS(N) :=EMP_OBJECT(i.EMP_NAME,i.BIRTH);
        END LOOP;
    RETURN L_EMPS;
END;
/
SELECT * FROM TABLE(BORN_AFTER_DATE(1962));

--4.0 STORED PROCEDURES
--4.1 BASIC STORED PROCEDURE
CREATE OR REPLACE PROCEDURE STORE_NAMEZ
(S OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN S FOR 
SELECT FIRSTNAME, LASTNAME 
FROM EMPLOYEE;
END;
/
SET SERVEROUTPUT ON;
DECLARE 
S SYS_REFCURSOR;
FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE;
LAST_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN 
    STORE_NAMEZ(S);
    LOOP
    FETCH S INTO FIRST_NAME,LAST_NAME;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO MORE ROWS ARE AVAILABLE 
    DBMS_OUTPUT.PUT_LINE(FIRST_NAME||' '||LAST_NAME||' ');
    END LOOP
    CLOSE;
END;
/

--4.2 STORES PROCEDURE INPUT PARAMETERS
--UPDATE EMPLOYEE INFO
CREATE  OR REPLACE PROCEDURE UPDATE_EMP
(E_ID NUMBER,FIRST_NAME VARCHAR,LAST_NAME VARCHAR)
AS 
BEGIN 
    UPDATE EMPLOYEE
    SET FIRSTNAME = FIRST_NAME, LASTNAME = LAST_NAME
    WHERE EMPLOYEEID = E_ID;
END;
/
EXECUTE UPDATE_EMP (7, 'ROBERTZ', 'KINGZ')
--RETURNS THE MANAGERS OF EMPLOYEE
CREATE OR REPLACE PROCEDURE GETEMPLOYEEMANAGER(E_ID IN INT, S OUT SYS_REFCURSOR)
AS 
BEGIN
OPEN S FOR
SELECT EMPLOYEEID, (FIRSTNAME ||' '|| LASTNAME), REPORTSTO
FROM EMPLOYEE
WHERE EMPLOYEEID = E_ID;
END;
/
DECLARE
S SYS_REFCURSOR;
E_ID EMPLOYEE.EMPLOYEEID%TYPE;
E_NAME EMPLOYEE.FIRSTNAME%TYPE;
E_MANAGER EMPLOYEE.EMPLOYEEID%TYPE;

BEGIN 
    GETEMPLOYEEMANAGER(2,S);
    LOOP
        FETCH S INTO E_ID, E_NAME, E_MANAGER; --retrieves rows of data from the result set of a multiple-row query
        EXIT WHEN S%NOTFOUND; --BREAKS LOOP WHEN NO MORE ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE: ' ||E_NAME);
        DBMS_OUTPUT.PUT_LINE('MANAGER: ' ||E_MANAGER);
        END LOOP
CLOSE;
END;
/ 

--4.3 RETURNS NAME AND COMPANY OF A CUSTOMER
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_INFO(C_ID IN INT, S OUT SYS_REFCURSOR)
AS 
BEGIN
OPEN S FOR
SELECT COMPANY,(FIRSTNAME||' '||LASTNAME)
FROM CUSTOMER
WHERE CUSTOMERID = C_ID;
END;
/
DECLARE
S SYS_REFCURSOR;
C_COMPANY CUSTOMER.COMPANY%TYPE;
C_NAME CUSTOMER.FIRSTNAME%TYPE;
BEGIN 
    GET_INFO(2,S);
    LOOP
        FETCH S INTO C_COMPANY, C_NAME; --retrieves rows of data from the result set of a multiple-row query
        EXIT WHEN S%NOTFOUND; --BREAKS LOOP WHEN NO MORE ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' ||C_NAME);
        DBMS_OUTPUT.PUT_LINE('COMPANY: ' ||C_COMPANY);
        END LOOP
CLOSE;
END;
/

--5.0 TRANSACTIONS
--DELETE AN INVOICE WITH INVOICEID
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(ID_DELETE IN INT)
AS
BEGIN
DELETE FROM INVOICELINE WHERE INVOICEID = ID_DELETE;
DELETE FROM INVOICE WHERE INVOICEID = ID_DELETE;
COMMIT;
END;
/

CALL DELETE_INVOICE(2);
--NESTED TRANSACTION THAT INSERTS A NEW RECORD 
CREATE SEQUENCE CUSTSEQ;
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2,EMAIL IN VARCHAR2)
AS
BEGIN
INSERT INTO CUSTOMER 
VALUES(CUSTSEQ.NEXTVAL +60, FIRSTNAME,LASTNAME,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,EMAIL,NULL);
COMMIT;
END;
/
CALL INSERT_CUSTOMER('ZAINEB','RAMZAN','ZRAMZAN1231@GMAIL.COM');

--6.0 TIGGERS....!
--AFTER INSERT TRIGGER ON THE EMPLOYEE TABLE
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TR_EMPLOYEE_ADDED
AFTER INSERT
ON EMPLOYEE
  FOR EACH ROW
BEGIN
  INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,REPORTSTO) 
  VALUES(:NEW.EMPLOYEEID,:NEW.LASTNAME,:NEW.FIRSTNAME,:NEW.REPORTSTO);  
END;
/
--AFTER UDPATE TRIGGER ON ABLUM 
CREATE OR REPLACE TRIGGER TR_ALBUM_AFTER_UPDATE_ARTIST /*INFORMS USER OF THEIR CHANGES WHEN TITLE IS UPDATED*/
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
 DBMS_OUTPUT.PUT_LINE('CHANGED: '|| :OLD.ARTISTID || 'TO: ' || :NEW.ARTISTID|| ' FOR ALBUM: ' || :OLD.ALBUMID );
END;
/
--

--7.0 JOINS 
--7.1 INNER JOIN
SELECT CUSTOMER.FIRSTNAME CUSTOMER.INVOICEID 
FROM CUSTOMER
INNER JOIN INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--7.2 OUTER JOIN
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
RIGHT OUTER JOIN INVOICE 
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--7.3 RIGHT JOIN
SELECT ARTIST.NAME, ALBUM.TITLE 
FROM ARTIST
RIGHT JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;
--7.4 CROSS JOIN
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST
CROSS JOIN ALBUM;
--7.5 SELF JOIN 
SELECT A.FIRSTNAME, B.FIRSTNAME
FROM EMPLOYEE A JOIN EMPLOYEE B
ON A.REPORTSTO = B.REPORTSTO 
AND A.EMPLOYEEID <> B.EMPLOYEEID;
