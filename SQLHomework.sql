--SQL homework

--2.1 Select Queries
    SELECT * FROM EMPLOYEE;
    SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
    SELECT * FROM EMPLOYEE Where FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
-- 2.2 Order by
    SELECT * FROM ALBUM ORDER BY TITLE DESC;
    SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
-- 2.3 Insert
-- Into Genre
INSERT INTO GENRE(GENREID,NAME) VALUES (26,'Electroswing');
INSERT INTO GENRE(GENREID,NAME) VALUES (27,'Progressive Rock');
-- Into Employee
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,
TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,
STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL) VALUES (9,'Griffin','Peter','Sales Support Agent',
2,TO_DATE('19690105', 'YYYY-MM-DD'), TO_DATE('20050930','YYYYMMDD'), '9905 Spooner St.', 
'Quahog', 'Rhode Island', 'USA', '02821', '(555)555-5555', '(555)111-1111', 'peter.griffin69@gmail.com');
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,
TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,
STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL) VALUES (10,'Smith','Stan','Sales Support Agent',
2,TO_DATE('19750105', 'YYYY-MM-DD'), TO_DATE('20050930','YYYYMMDD'), '5 Virgina Ave SW', 
'Langley Falls', 'VA', 'USA', '52462', '(555)444-5555', '(555)111-2222', 'stan.smith75@aol.com');
-- Into Customer
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME,
COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,
PHONE,FAX,EMAIL,SUPPORTREPID) VALUES (60,'Tim','Drake','Wayne Media','89 Gotham Lane', 
'Gotham', 'New Jersey', 'USA', '01940', '(232)555-1989',
'(232)111-2009', 'tdrake89@gmail.com',4);
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME,
COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,
PHONE,FAX,EMAIL,SUPPORTREPID) VALUES (61,'Jason','Todd','Wayne Enterprises','83 Gotham Lane', 
'Gotham', 'New Jersey', 'USA', '01940', '(232)555-1983',
'(232)111-2005', 'jason.todd83@gmail.com',5);
-- 2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

-- 2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003/06/01','YYYY/MM/DD') AND TO_DATE('2004/03/01','YYYY/MM/DD');
-- 2.7 DELETE
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
--section 3: SQL Functions
--3.1: System Defined Functions
SELECT CURRENT_TIMESTAMP from dual;
SELECT LENGTH(NAME) FROM MEDIATYPE;
--3.2: System Defined Aggregate Functions
SELECT ROUND(AVG(TOTAL),2) FROM INVOICE;
SELECT * FROM TRACK WHERE UNITPRICE =(SELECT MAX(UNITPRICE) FROM TRACK);
--3.3: User Defined Scalar Functions
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN NUMBER AS
AVG_INVL NUMBER;
BEGIN
    SELECT ROUND((SUM(UNITPRICE)/COUNT(UNITPRICE)),2) INTO AVG_INVL FROM INVOICELINE;
    RETURN AVG_INVL;
END;
/
--
SELECT AVG_INVOICELINE FROM DUAL;
--3.4 USER DEFINED TABLE VALUE FUNCTIONS
--CREATE OR REPLACE FUNCTION GENXEMPLOYEES
--BEGIN
--    SELECT * FROM EMPLOYEE
--    WHERE BIRTHDATE > TO_DATE('19680101','YYYY-MM-DD');
--END;
CREATE OR REPLACE TYPE X_OBJECT FORCE IS OBJECT(EMP_NAME VARCHAR2(200), BIRTHDAY DATE);
/
CREATE OR REPLACE TYPE GEN_X IS TABLE OF X_OBJECT;
/
CREATE OR REPLACE FUNCTION GEN_X_EMPLOYEES(BDAY IN NUMBER)
RETURN GEN_X AS L_EMPS GEN_X := GEN_X();
N INTEGER :=0;
BEGIN
    FOR i IN (SELECT (FIRSTNAME||' '|| LASTNAME) AS GENX_NAME, BIRTHDATE AS BIRTH FROM EMPLOYEE WHERE BIRTHDATE > (TO_DATE(BDAY,'YYYY-MM-DD')) )
        LOOP
        L_EMPS.EXTEND(); /*Extend(): Allocates one element space.*/
        N:=N+1;
        L_EMPS(N) :=X_OBJECT(i.GENX_NAME,i.BIRTH);
        END LOOP;
    RETURN L_EMPS;
END;
/

SELECT * FROM TABLE(GEN_X_EMPLOYEES(19681231));
/

--4.0 PROCEDURES

--4.1 Basic Stored Procedures
CREATE OR REPLACE PROCEDURE EMP_BASICINFO
(S OUT SYS_REFCURSOR)
IS 
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
END;
/
DECLARE
S SYS_REFCURSOR;
FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE;
LAST_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    EMP_BASICINFO(S);
    LOOP
    FETCH S INTO FIRST_NAME,LAST_NAME;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOK WHEN NO MORE ROWS ARE AVAILABLE
    DBMS_OUTPUT.PUT_LINE(FIRST_NAME||' ' ||LAST_NAME||' IS CURRENT NAME');
END LOOP
CLOSE;
END;
/
SET SERVEROUTPUT ON;
--4.2 Stored Procedure Input Parameters
--4.2.1
CREATE OR REPLACE PROCEDURE UPDATE_EMP 
AS
BEGIN
    UPDATE EMPLOYEE
    SET TITLE = 'IT Associate'
    WHERE REPORTSTO = 6;
    
    UPDATE EMPLOYEE
    SET CITY = 'Edmunton'
    WHERE EMPLOYEEID = 5;
END;
/
EXECUTE UPDATE_EMP;
/
SELECT * FROM EMPLOYEE;
--4.2.2
CREATE OR REPLACE PROCEDURE GET_MANAGER(EMP_ID IN NUMBER, 
S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
    SELECT A.EMPLOYEEID,A.FIRSTNAME,A.LASTNAME,A.TITLE
    FROM EMPLOYEE A
    WHERE A.EMPLOYEEID =(
        SELECT B.REPORTSTO
        FROM EMPLOYEE B
        WHERE(B.EMPLOYEEID = EMP_ID));
END;
/
DECLARE
S SYS_REFCURSOR;
MANAGER_ID EMPLOYEE.EMPLOYEEID%TYPE;
FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE;
LAST_NAME EMPLOYEE.LASTNAME%TYPE;
MAN_TITLE EMPLOYEE.TITLE%TYPE;
BEGIN
    GET_MANAGER(7,S);
    LOOP
    FETCH S INTO MANAGER_ID,FIRST_NAME,LAST_NAME,MAN_TITLE;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOK WHEN NO MORE ROWS ARE AVAILABLE
    DBMS_OUTPUT.PUT_LINE('THE MANAGER OF THIS EMPLOYEE IS '||FIRST_NAME||' '||LAST_NAME||', ID: '||MANAGER_ID||', TITLE: '||MAN_TITLE);
END LOOP
CLOSE;
END;
/
SET SERVEROUTPUT ON;
--4.3 Stored Procedure Output Parameters
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO
(S OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN S FOR
SELECT FIRSTNAME,LASTNAME,COMPANY FROM CUSTOMER;
END;
/
DECLARE
S SYS_REFCURSOR;
FIRST_NAME CUSTOMER.FIRSTNAME%TYPE;
LAST_NAME CUSTOMER.LASTNAME%TYPE;
C_COMPANY CUSTOMER.COMPANY%TYPE;
BEGIN
    GET_CUSTOMER_INFO(S);
    LOOP
    FETCH S INTO FIRST_NAME,LAST_NAME,C_COMPANY;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOK WHEN NO MORE ROWS ARE AVAILABLE
    DBMS_OUTPUT.PUT_LINE('CUSTOMER NAME: '||FIRST_NAME||' '||LAST_NAME||', COMPANY: '||C_COMPANY);
END LOOP
CLOSE;
END;
/
SET SERVEROUTPUT ON;
--5.0 TRANSACTIONS
SAVEPOINT save_13;
DELETE FROM INVOICELINE WHERE INVOICEID = 13;
DELETE FROM INVOICE WHERE INVOICEID = 13;

ROLLBACK TO SAVEPOINT save_13;

CREATE OR REPLACE PROCEDURE insertCustomer(
	   CUSTOMER_ID IN CUSTOMER.CUSTOMERID%TYPE,
	   FIRST_NAME IN CUSTOMER.FIRSTNAME%TYPE,
	   LAST_NAME IN CUSTOMER.LASTNAME%TYPE,
	   C_COMPANY IN CUSTOMER.COMPANY%TYPE,
       C_ADDRESS IN CUSTOMER.ADDRESS%TYPE,
       C_CITY IN CUSTOMER.CITY%TYPE,
       C_STATE IN CUSTOMER.STATE%TYPE,
       C_COUNTRY IN CUSTOMER.COUNTRY%TYPE,
       C_POSTALCODE IN CUSTOMER.POSTALCODE%TYPE,
       C_PHONE IN CUSTOMER.PHONE%TYPE,
       C_FAX IN CUSTOMER.FAX%TYPE,
       C_EMAIL IN CUSTOMER.EMAIL%TYPE,
       C_SUPPORTREPID IN CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    --SAVEPOINT denied;
    INSERT INTO CUSTOMER("CUSTOMERID", "FIRSTNAME", "LASTNAME",
    "COMPANY","ADDRESS","CITY","STATE","COUNTRY","POSTALCODE",
    "PHONE","FAX","EMAIL","SUPPORTREPID") 
    VALUES 
    (CUSTOMER_ID,FIRST_NAME,LAST_NAME,C_COMPANY,C_ADDRESS,C_CITY,
    C_STATE,C_COUNTRY,C_POSTALCODE,C_PHONE,C_FAX,C_EMAIL, C_SUPPORTREPID);
END;
/
SAVEPOINT denied;
BEGIN
    insertCustomer(62,'Clark','Kent','Daily Planet','38 Metropolis Avenue', 
    'Metropolis', 'New York', 'USA', '38019', '(528)429-1398',
    '(528)222-4592', 'ckent83@dplanet.com',4);
END;
/
ROLLBACK TO SAVEPOINT denied;

--6.0 TRIGGERS
SAVEPOINT check1;
/
CREATE OR REPLACE TRIGGER insertNewGenre 
AFTER INSERT ON GENRE
FOR EACH ROW 
WHEN (NEW.GENREID > 0)  
BEGIN 
   DBMS_OUTPUT.PUT_LINE('New Genre: ' || :NEW.NAME); 
END; 
/
CREATE OR REPLACE TRIGGER updateMEDIATYPE 
AFTER UPDATE ON GENRE
FOR EACH ROW 
WHEN (NEW.NAME != OLD.NAME)  
BEGIN 
   DBMS_OUTPUT.PUT_LINE('MEDIATYPE NAME CHANGED TO: ' || :NEW.NAME); 
END;
/
CREATE OR REPLACE TRIGGER deletePLAYLIST 
AFTER DELETE ON PLAYLIST
FOR EACH ROW   
BEGIN 
   DBMS_OUTPUT.PUT_LINE('PLAYLIST DELETED: ' || :OLD.NAME); 
END;
/
INSERT INTO GENRE VALUES (28,'Tropical House');
UPDATE MEDIATYPE
SET NAME = 'MP3 FILE'
WHERE MEDIATYPEID = 1;
DELETE FROM PLAYLISTTRACK WHERE PLAYLISTID = 18;
DELETE FROM PLAYLIST WHERE PLAYLISTID = 18;
ROLLBACK TO SAVEPOINT check1;
--7.0 JOINS
--SELECT * FROM CUSTOMER INNER JOIN INVOICE
--ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--7.1 inner join
SELECT C.FIRSTNAME,C.LASTNAME,I.INVOICEID 
FROM CUSTOMER C 
INNER JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;
--7.2 outer join
SELECT C.CUSTOMERID,C.FIRSTNAME,C.LASTNAME,I.INVOICEID,I.TOTAL 
FROM CUSTOMER C 
FULL OUTER JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;
--7.3 RIGHT (OUTER) JOIN
SELECT AL.TITLE, AR.NAME
FROM ALBUM AL
RIGHT JOIN ARTIST AR
ON AL.ARTISTID = AR.ARTISTID;
--7.4 CROSS JOIN
SELECT *
FROM ALBUM AL
CROSS JOIN ARTIST AR
ORDER BY AR.NAME;
--7.5 SELF JOIN
SELECT *
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON A.REPORTSTO = B.REPORTSTO;