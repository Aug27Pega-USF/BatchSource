--------------------------------------------------------
--  DDL for Table BANK_ACCOUNTS
--------------------------------------------------------

  CREATE TABLE "STRUONG"."BANK_ACCOUNTS" 
   (	"BANK_ACC_NUM" VARCHAR2(10 BYTE), 
	"PRIMARYHOLDERID" NUMBER(*,0), 
	"JOINTHOLDERID" NUMBER(*,0), 
	"BALANCE" NUMBER, 
	"WAITINGAPPROVAL" CHAR(1 BYTE) DEFAULT 'Y'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C005222
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."SYS_C005222" ON "STRUONG"."BANK_ACCOUNTS" ("BANK_ACC_NUM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table BANK_ACCOUNTS
--------------------------------------------------------

  ALTER TABLE "STRUONG"."BANK_ACCOUNTS" MODIFY ("BANK_ACC_NUM" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."BANK_ACCOUNTS" ADD CONSTRAINT "SYS_C005222" PRIMARY KEY ("BANK_ACC_NUM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;

--------------------------------------------------------
--  DDL for Table USER_INFORMATION
--------------------------------------------------------

  CREATE TABLE "STRUONG"."USER_INFORMATION" 
   (	"USER_ACC_NUM" NUMBER(9,0), 
	"FIRSTNAME" VARCHAR2(32 BYTE), 
	"LASTNAME" VARCHAR2(32 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"PHONE" VARCHAR2(20 BYTE), 
	"DOB" DATE, 
	"ADDRESS" VARCHAR2(50 BYTE), 
	"STATE" VARCHAR2(25 BYTE), 
	"ZIP" VARCHAR2(10 BYTE), 
	"USERNAME" VARCHAR2(32 BYTE), 
	"PASSWORD" VARCHAR2(32 BYTE), 
	"USERTYPE" NUMBER(2,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UK_USER_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."UK_USER_NAME" ON "STRUONG"."USER_INFORMATION" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UK_USER_ACC_NUM
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."UK_USER_ACC_NUM" ON "STRUONG"."USER_INFORMATION" ("USER_ACC_NUM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

--------------------------------------------------------
--  Constraints for Table USER_INFORMATION
--------------------------------------------------------

  ALTER TABLE "STRUONG"."USER_INFORMATION" ADD CONSTRAINT "UK_USER_ACC_NUM" UNIQUE ("USER_ACC_NUM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "STRUONG"."USER_INFORMATION" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."USER_INFORMATION" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."USER_INFORMATION" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."USER_INFORMATION" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."USER_INFORMATION" MODIFY ("USER_ACC_NUM" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."USER_INFORMATION" ADD CONSTRAINT "UK_USER_NAME" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;

--------------------------------------------------------
--  DDL for Table TRANSACTIONLOG
--------------------------------------------------------

  CREATE TABLE "STRUONG"."TRANSACTIONLOG" 
   (	"TRANSACTIONID" NUMBER, 
	"EVENT_DATE" TIMESTAMP (6), 
	"TYPE" VARCHAR2(10 BYTE), 
	"ACC_NUMBER" VARCHAR2(15 BYTE), 
	"AMOUNT" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TRANSACTIONLOG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."TRANSACTIONLOG_PK" ON "STRUONG"."TRANSACTIONLOG" ("TRANSACTIONID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TG_TRANSACTIONLOG_ON_INSERT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "STRUONG"."TG_TRANSACTIONLOG_ON_INSERT" 
BEFORE INSERT ON TRANSACTIONLOG 
FOR EACH ROW 
BEGIN
    SELECT TRANSACTIONLOG_ID_SEQ.NEXTVAL INTO :NEW.TRANSACTIONID FROM DUAL;
    SELECT TYPEID INTO :NEW.TYPE FROM TRANSACTIONTYPE WHERE TYPENAME = :NEW.TYPE;
END;
/
ALTER TRIGGER "STRUONG"."TG_TRANSACTIONLOG_ON_INSERT" ENABLE;
--------------------------------------------------------
--  Constraints for Table TRANSACTIONLOG
--------------------------------------------------------

  ALTER TABLE "STRUONG"."TRANSACTIONLOG" MODIFY ("EVENT_DATE" NOT NULL ENABLE);
  ALTER TABLE "STRUONG"."TRANSACTIONLOG" ADD CONSTRAINT "TRANSACTIONLOG_PK" PRIMARY KEY ("TRANSACTIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "STRUONG"."TRANSACTIONLOG" MODIFY ("TRANSACTIONID" NOT NULL ENABLE);

--------------------------------------------------------
--  DDL for Table USER_LEVEL
--------------------------------------------------------

  CREATE TABLE "STRUONG"."USER_LEVEL" 
   (	"USERLEVEL" NUMBER(2,0), 
	"LEVELNAME" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C005224
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."SYS_C005224" ON "STRUONG"."USER_LEVEL" ("USERLEVEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table USER_LEVEL
--------------------------------------------------------

  ALTER TABLE "STRUONG"."USER_LEVEL" ADD PRIMARY KEY ("USERLEVEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;

--------------------------------------------------------
--  DDL for Table TRANSACTIONTYPE
--------------------------------------------------------

  CREATE TABLE "STRUONG"."TRANSACTIONTYPE" 
   (	"TYPEID" NUMBER(3,0), 
	"TYPENAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TRANSACTIONTYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "STRUONG"."TRANSACTIONTYPE_PK" ON "STRUONG"."TRANSACTIONTYPE" ("TYPEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table TRANSACTIONTYPE
--------------------------------------------------------

  ALTER TABLE "STRUONG"."TRANSACTIONTYPE" ADD CONSTRAINT "TRANSACTIONTYPE_PK" PRIMARY KEY ("TYPEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "STRUONG"."TRANSACTIONTYPE" MODIFY ("TYPEID" NOT NULL ENABLE);

--------------------------------------------------------
--  DDL for Procedure CREATE_NEW_BANK_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "STRUONG"."CREATE_NEW_BANK_ACCOUNT" 
(
  New_ACC_ID IN NUMBER
, PRIMARY_ACC_ID IN NUMBER 
, JOINT_ACC_ID IN NUMBER 
, BALANCE IN NUMBER DEFAULT 0 
, STATUS OUT VARCHAR2 
) AS 
PRIMARY_USER_LEVEL NUMBER;
NEW_ACC_NUM NUMBER;
JOINT_STATUS NUMBER;
PRIMARY_STATUS NUMBER;
BEGIN
    IF BALANCE >= 0 THEN
        SELECT count(*) INTO PRIMARY_STATUS FROM USER_INFORMATION WHERE USER_ACC_NUM = PRIMARY_ACC_ID;
        IF PRIMARY_STATUS = 1 THEN
            BEGIN
                SELECT count(*) INTO NEW_ACC_NUM FROM BANK_ACCOUNTS WHERE BANK_ACC_NUM = NEW_ACC_ID;
                IF NEW_ACC_NUM = 0 THEN
                    NEW_ACC_NUM := NEW_ACC_ID;
                    IF NEW_ACC_ID IS NULL OR NEW_ACC_ID = 0 THEN
                        NEW_ACC_NUM := BANK_ACC_NUM_SEQ.NEXTVAL;
                    END IF;
                    SELECT count(*) INTO JOINT_STATUS FROM USER_INFORMATION WHERE USER_ACC_NUM = JOINT_ACC_ID;
                    IF JOINT_STATUS != 1 THEN
                        JOINT_STATUS := 0;
                    END IF; 
                    SELECT USERTYPE INTO PRIMARY_USER_LEVEL FROM USER_INFORMATION WHERE USER_ACC_NUM = PRIMARY_ACC_ID; 
                    IF PRIMARY_USER_LEVEL = 1 AND JOINT_STATUS = 1 THEN
                        BEGIN
                            INSERT INTO BANK_ACCOUNTS(BANK_ACC_NUM, PRIMARYHOLDERID, JOINTHOLDERID, BALANCE) 
                            VALUES (NEW_ACC_NUM, PRIMARY_ACC_ID, JOINT_ACC_ID, BALANCE)
                            RETURNING 'SUCCESS' INTO STATUS;
                            IF STATUS != 'SUCCESS' THEN
                                STATUS := 'FAILED';
                            END IF;
                        END;
                    ELSIF PRIMARY_USER_LEVEL = 1 THEN
                        BEGIN
                            INSERT INTO BANK_ACCOUNTS(BANK_ACC_NUM, PRIMARYHOLDERID, JOINTHOLDERID, BALANCE) 
                            VALUES (NEW_ACC_NUM, PRIMARY_ACC_ID, NULL, BALANCE) 
                            RETURNING 'SUCCESS' INTO STATUS;
                            IF STATUS != 'SUCCESS' THEN
                                STATUS := 'FAILED';
                            END IF;
                        END;
                    ELSE
                        STATUS := 'INVALID_USER_TYPE';
                    END if;
                ELSE
                    STATUS := 'FAILED';
                END IF;
            END;
        ELSE
            STATUS := 'INVALID_PRIMARY';
        END IF;
    ELSE
        STATUS := 'INVALID_DEPOSIT';
    END IF;
END CREATE_NEW_BANK_ACCOUNT;
/

--------------------------------------------------------
--  DDL for Procedure CREATE_NEW_USER_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "STRUONG"."CREATE_NEW_USER_ACCOUNT" 
(
  NEW_ACC_ID IN NUMBER
, NEW_USERNAME IN VARCHAR2 
, NEW_PASSWORD IN VARCHAR2 
, NEW_FIRSTNAME IN VARCHAR2 
, NEW_LASTNAME IN VARCHAR2 
, NEW_EMAIL IN VARCHAR2 
, NEW_PHONE IN VARCHAR2 
, NEW_DOB IN DATE 
, NEW_ADDRESS IN VARCHAR2 
, NEW_STATE IN VARCHAR2 
, NEW_ZIP IN VARCHAR2 
, USER_LEVEL IN NUMBER 
, STATUS OUT VARCHAR2 
) AS 
NEW_USER_ACC_NUM NUMBER;
DUPE_USERNAME NUMBER;
BEGIN
    SELECT COUNT(*) INTO DUPE_USERNAME FROM USER_INFORMATION WHERE USERNAME = NEW_USERNAME;
    IF DUPE_USERNAME = 0 THEN 
        BEGIN
            SELECT COUNT(*) INTO NEW_USER_ACC_NUM FROM USER_INFORMATION WHERE USER_ACC_NUM = NEW_ACC_ID;
            IF NEW_USER_ACC_NUM = 0 THEN
                BEGIN
                    NEW_USER_ACC_NUM := NEW_ACC_ID;
                    IF NEW_ACC_ID IS NULL OR NEW_ACC_ID = 0 THEN
                        NEW_USER_ACC_NUM := BANK_ACC_NUM_SEQ.NEXTVAL;
                    END IF;
                    INSERT INTO USER_INFORMATION(USER_ACC_NUM, USERNAME, PASSWORD, FIRSTNAME, LASTNAME, EMAIL, PHONE, DOB, ADDRESS, STATE, ZIP, USERTYPE) 
                    VALUES (NEW_USER_ACC_NUM, NEW_USERNAME, NEW_PASSWORD, NEW_FIRSTNAME, NEW_LASTNAME, NEW_EMAIL, NEW_PHONE, NEW_DOB, NEW_ADDRESS, NEW_STATE, NEW_ZIP, USER_LEVEL)
                    RETURNING 'SUCCESS' INTO STATUS;
                    IF STATUS != 'SUCCESS' THEN
                        STATUS := 'FAILED';
                    END IF;
                END;
            ELSE
                STATUS := 'INVALID_USER_ACC_NUM';
            END IF;
        END;
    ELSE
        STATUS := 'USERNAME_EXIST';
    END IF;
END CREATE_NEW_USER_ACCOUNT;
/

--------------------------------------------------------
--  DDL for Procedure UPDATE_EMP_FIRST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "STRUONG"."UPDATE_EMP_FIRST" 
(NEW_FIRST IN VARCHAR2, EMP_ID IN NUMBER)
AS
BEGIN 
    UPDATE EMPLOYEE SET FIRSTNAME = NEW_FIRST WHERE EMPLOYEEID = EMP_ID;
END;
/

--------------------------------------------------------
--  DDL for Procedure UPDATE_USER_LOGIN_INFO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "STRUONG"."UPDATE_USER_LOGIN_INFO" 
(
  NEW_USERNAME IN VARCHAR2 
, NEW_PASSWORD IN VARCHAR2 
, USER_ACC_ID IN VARCHAR2 
, STATUS OUT VARCHAR2 
) AS 
USERNAME_EXIST NUMBER;
VALID_USER_ACC_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO VALID_USER_ACC_ID FROM USER_INFORMATION WHERE USER_ACC_NUM = USER_ACC_ID;
    IF VALID_USER_ACC_ID = 1 THEN 
        SELECT COUNT(*) INTO USERNAME_EXIST FROM USER_INFORMATION WHERE USERNAME = NEW_USERNAME;
        IF USERNAME_EXIST = 0 THEN
            BEGIN
                UPDATE USER_INFORMATION 
                SET USERNAME = NEW_USERNAME, PASSWORD = NEW_PASSWORD
                WHERE USER_ACC_NUM = USER_ACC_ID
                RETURNING 'SUCCESS' INTO STATUS;
                IF STATUS != 'SUCCESS' THEN
                    STATUS := 'FAILED';
                END IF;
            END;
        ELSE 
            STATUS := 'EXISTING_USERNAME';
        END IF;
    ELSE 
        STATUS := 'INVALID_USER_ACC_NUM';
    END IF;
END UPDATE_USER_LOGIN_INFO;
/

--------------------------------------------------------
--  DDL for Sequence BANK_ACC_NUM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRUONG"."BANK_ACC_NUM_SEQ"  MINVALUE 100000000 MAXVALUE 900000000 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE   ;

--------------------------------------------------------
--  DDL for Sequence TRANSACTIONLOG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRUONG"."TRANSACTIONLOG_ID_SEQ"  MINVALUE 1 MAXVALUE 1000000000 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE   ;

--------------------------------------------------------
--  DDL for Sequence USER_ACC_NUM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STRUONG"."USER_ACC_NUM_SEQ"  MINVALUE 100000000 MAXVALUE 900000000 INCREMENT BY -1 START WITH 899999980 CACHE 20 NOORDER  NOCYCLE   ;
