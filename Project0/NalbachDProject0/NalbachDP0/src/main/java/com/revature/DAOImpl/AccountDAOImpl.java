package com.revature.DAOImpl;

import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.revature.Connection.ConnFactory;
import com.revature.dao.AccountDAO;
import com.revature.dao.TransactionsDAO;
import com.revature.tables.Account;

public class AccountDAOImpl implements AccountDAO {
	private float balance =0; 
	public static ConnFactory cf = ConnFactory.getInstance();
	public void createAccount(String accountName, int userID, float balance) throws SQLException {
		Connection conn =cf.getConnection();
		String sql = "{call INSERTACCOUNTS (?,?,?)}";
		CallableStatement call = conn.prepareCall(sql);
		call.setString(1, accountName);
		call.setInt(2, userID);
		call.setFloat(3, balance); 
		call.execute(); //Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.
	}
	//Admin menu case 1 setup
	public void allUserAccounts() throws SQLException{
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ACCOUNTS");
		ResultSet rs = stmt.executeQuery(); 		//Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
			ResultSetMetaData rsmd = rs.getMetaData();
			System.out.println("The Account information: ");
			int columnsNumber = rsmd.getColumnCount();
		while(rs.next()) {
			for(int i = 1; i <= columnsNumber; i++) {
				if(i >0)System.out.println(", ");
				String columnValue = rs.getString(i);
				System.out.print(rsmd.getColumnName(i) +" "+ columnValue);
			}
		 System.out.println();
		}

		try{
			System.in.read();
		}catch(IOException e){
			e.printStackTrace();
		}
		System.out.println();
	}
	
	//
	public void allAccounts(int userId) throws SQLException{
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ACCOUNTS WHERE USER_ID=?");
		stmt.setInt(1, userId);
		ResultSet rs = stmt.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			System.out.println("The Account information: ");
			int columnsNumber = rsmd.getColumnCount();
		while(rs.next()) {
			for(int i = 1; i <= columnsNumber; i++) {
				if(i >1)System.out.println(", ");
				String columnValue = rs.getString(i);
				System.out.print(rsmd.getColumnName(i) +" "+ columnValue);
			}
		 System.out.println();
		}

		try{
			System.in.read();
		}catch(IOException e){
			e.printStackTrace();
		}
		System.out.println();
	}
	
	public List<Account> getAccountList(int useridfind) throws SQLException {
		List<Account> getBankAccountList = new ArrayList<Account>();
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ACCOUNTS WHERE USER_ID=?");
		stmt.setInt(1, useridfind);
		ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
			getBankAccountList.add(new Account(rs.getInt(1), rs.getString(2), rs.getInt(3), rs.getInt(4)));
		}
		if(getBankAccountList.size() >0) {
			return getBankAccountList;
		}else {
			return null;
		}
	}
	public void update(int accountNumber, float balance) throws SQLException{
		Connection conn = cf.getConnection();
		String sql = "{call UPDATE_ACCOUNTS(?,?)";
		CallableStatement call = conn.prepareCall(sql);
		call.setInt(1,accountNumber);
		call.setFloat(2, balance);
		call.execute();		//Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.
	}
	public void delete(int accountNumber) throws SQLException{
		Connection conn = cf.getConnection();
		String sql = "{call ACCOUNT_NUM(?)";
		CallableStatement call = conn.prepareCall(sql);
		call.setInt(1, accountNumber);
		call.execute();
	}
	
	//User menu case 2 setup
	public void makeDeposit(int accountNumber, int userID,float balance)throws SQLException {
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT BALANCE FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ? AND USER_ID =?");
		stmt.setInt(1,accountNumber);
		stmt.setInt(2,userID);
		ResultSet rs = stmt.executeQuery();	
		if(rs.next()==false) {
			System.out.println("An error occured please try again");
		}else {
				float balanceCheck = rs.getFloat(1);
				balance = balance + balanceCheck;
				String sql = "UPDATE ACCOUNTS SET BALANCE= ? WHERE ACCOUNT_NUMBER = ? AND USER_ID = ?";
				CallableStatement call = conn.prepareCall(sql);
				call.setDouble (1,balance);
				call.setInt (2,accountNumber);
				call.setInt(3, userID);
				call.executeUpdate();
				String transactionName = null;
				TransactionsDAOImpl tdi = new TransactionsDAOImpl();
				tdi.createTransactions(accountNumber,transactionName,balance);
				System.out.println("Balance has been update your new balance is: " + balance);
		}
		System.out.println();
	}
		
	//User menu case 3 setup
	public static void makeAWithdraw(int accountNumber, int userId, float balance) throws SQLException{
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT BALANCE FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ? AND USER_ID =?");
		stmt.setInt(1,accountNumber);
		stmt.setInt(2,userId);
		ResultSet rs = stmt.executeQuery();
		
		if (rs.next()==false) {
			System.out.println("An error occured please try again");
		}else {
			float balanceCheck = rs.getFloat(1);
			int comparingBal = Float.compare(balance, balanceCheck);
			int transactionID;
			int compareBal = 0;
	if(comparingBal < 0) {
		float currentBalance = balance;
	  	balance = (balanceCheck - balance);
		String sql = "UPDATE ACCOUNTS SET BALANCE= ? WHERE ACCOUNT_NUMBER = ? AND USER_ID = ?";
		CallableStatement call = conn.prepareCall(sql);
		call.setFloat (1,balance);
		call.setInt (2,accountNumber);
		call.setInt(3, userId);
		call.executeUpdate();
		String transactionName = null;
		TransactionsDAOImpl tdi = new TransactionsDAOImpl();
		tdi.createTransactions(accountNumber,transactionName,balance);
		System.out.println("Balance has been update your new balance is: " + balance);
	}else if(compareBal > 0) {
			  System.out.println("You do not have enough funds to make that transaction");
		}else {
    	  	balance = ( balanceCheck - balance);
    		String sql = "UPDATE ACCOUNTS SET BALANCE= ? where ACCOUNT_NUMBER = ? AND USER_ID = ?";
    		CallableStatement call = conn.prepareCall(sql);
    		call.setFloat (1,balance);
    		call.setInt (2,accountNumber);
    		call.setInt(3, userId);
    		call.executeUpdate();
    		String transactionName = null;
    		TransactionsDAOImpl tdi = new TransactionsDAOImpl();
    		tdi.createTransactions(accountNumber,transactionName,balance);
    		System.out.println("Balance has been update your new balance is: " + balance);
		}
	}
	}	
	

	@Override
	public List<Account> getAccountList() throws SQLException {
		return null;
	}

	public int getLastAccount() throws SQLException {
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT ACCOUNT_NUMBER FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ( SELECT MAX(ACCOUNT_NUMBER) from ACCOUNTS)");
        ResultSet rs = stmt.executeQuery();        
        int accountId = 0;
		while (rs.next()) {
			accountId = rs.getInt(1);
        	//System.out.println(accountId);
        }
        return accountId;
	}
	//User menu case 4 setup
	public void getCertainAccount(int accountId) throws SQLException {
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ACCOUNTS WHERE ACCOUNT_NUMBER=?");
		stmt.setInt(1, accountId);
		ResultSet rs = stmt.executeQuery();	
		   ResultSetMetaData rsmd = rs.getMetaData();
		   System.out.println("The User information you requested is:");
		   int columnsNumber = rsmd.getColumnCount();
		while (rs.next()){
			for (int i = 1; i <= columnsNumber; i++)
			{
		        if (i > 1) System.out.print(",  ");
		        String columnValue = rs.getString(i);
		        System.out.print(columnValue + " " + rsmd.getColumnName(i));
		    }
			System.out.println();		
		}
		System.out.println();
	}
	
	public void getCertain2Account(int accountId, int userId) throws SQLException {
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ACCOUNTS WHERE ACCOUNT_NUMBER=? AND USER_ID=?");
		stmt.setInt(1, accountId);
		stmt.setInt(2, userId);
		ResultSet rs = stmt.executeQuery();	
		   ResultSetMetaData rsmd = rs.getMetaData();
		   System.out.println("The User information you requested is:");
		   int columnsNumber = rsmd.getColumnCount();
		while (rs.next()){
			for (int i = 1; i <= columnsNumber; i++)
			{
		        if (i > 1) System.out.print(",  ");
		        String columnValue = rs.getString(i);
		        System.out.print(columnValue + " " + rsmd.getColumnName(i));
		    }
			System.out.println();		
		}
		System.out.println();
	}
//User menu case 5 setup
	public void deleteEmptyAccount(int accountNumber, int userID)throws SQLException {
		Connection conn = cf.getConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT BALANCE FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ? AND USER_ID =?");
		stmt.setInt(1,accountNumber);
		stmt.setInt(2,userID);
		ResultSet rs = stmt.executeQuery();	
		if(rs.next()==false) {
			System.out.println("Something Went wrong please try again");
		}else {
			double balanceCheck = rs.getDouble(1);
			if(balanceCheck!=0) {
				System.out.println("Your account has to be empty before you can delete it. Press enter to go back to the Users Menu.");
		}else {
			String sql = "CALL DELETE_ACCOUNT(?,?)";
			CallableStatement call = conn.prepareCall(sql);
			call.setInt (1,accountNumber);
			call.setInt(2, userID);
			call.executeUpdate();
			System.out.println("Your account has been deleted ");
		}
		try {
			System.in.read();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
			
		}
	}
}
