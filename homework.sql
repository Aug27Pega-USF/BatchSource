--2.1 SELECT
--Task – Select all records from the Employee table.
SELECT * FROM EMPLOYEE;

--Task – Select all records from the Employee table where last name is King.
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'KING';

--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'ANDREW' AND REPORTSTO IS NULL;

--2.2 ORDER BY

--Task – Select all albums in Album table and sort result set in descending order by title.
SELECT * FROM ALBUM ORDER BY ALBUMID DESC;

--Task – Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE VALUES(26,'ROCK');
INSERT INTO GENRE VALUES (27, 'BOLLYWOOD');

INSERT INTO EMPLOYEE 
VALUES(9, 'Desai', 'Shafi', 'Engineer', 7, '08-MAY-76', '31-DEC-08', '908 8TH STREET', 'IRVINE' , 'CA', 'UNITED STATES', 32000, '+1 (303) 432-5555', '+1 (908) 566-7777', 'ss@gmail.com');

INSERT INTO EMPLOYEE 
VALUES(10, 'Cervantes', 'Miguel', 'Software Developer', 3, '09-Jun-86', '31-DEC-12', '98 5TH STREET', 'Corona' , 'CA', 'UNITED STATES', 92885, '+1 (103) 222-5955', '+1 (979) 798-7277', 'cm@gmail.com');

INSERT INTO CUSTOMER 
VALUES(60, 'Ramon', 'Patel', '(null)', '58 7TH STREET', 'Ahmedabad' , '(null)', 'India', 38005, '+1 (555) 444-5785', '+1 (945) 622-7987', 'rp@gmail.com', 5);

INSERT INTO CUSTOMER 
VALUES(61, 'Particia', 'Carpenter', '(null)', '3205 Iowa STREET', 'Anaheim' , 'CA', 'United States', 38005, '+1 (465) 794-2323', '+1 (945) 622-2315', 'pc@gmail.com', 2);

--2.4
UPDATE CUSTOMER
SET FIRSTNAME= 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME= 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7
DELETE FROM INVOICELINE WHERE INVOICELINE.INVOICEID
IN (SELECT INVOICEID FROM INVOICE WHERE INVOICE.CUSTOMERID IN (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME= 'Robert' AND LASTNAME = 'Walter'));

--3.1
SELECT TO_CHAR(CURRENT_DATE, 'DD-MM-YYYY HH:MI:SS') FROM DUAL;
SELECT LENGTH(NAME) FROM MEDIATYPE;
 
--3.2
SELECT AVG(TOTAL) FROM INVOICE;
SELECT * FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);

--3.3
SELECT AVG(UNITPRICE) FROM INVOICELINE;

--3.4 HELPED FROM KEVIN.
CREATE OR REPLACE TYPE EMP_OBJECT FORCE IS OBJECT(EMP_NAME VARCHAR2(200), YEAR_BORN DATE); /*Create object to store data*/
/
CREATE OR REPLACE TYPE EMPLOYEE_BORN IS TABLE OF EMP_OBJECT;/*Create table to store emp objects*/
/
CREATE OR REPLACE FUNCTION BORN_AFTER_DATE(BIRTHYEAR IN NUMBER)
RETURN EMPLOYEE_BORN AS L_EMPS EMPLOYEE_BORN := EMPLOYEE_BORN();
N INTEGER :=0;
BEGIN
    FOR i IN (SELECT (FIRSTNAME||' '|| LASTNAME) AS EMP_NAME, BIRTHDATE AS BIRTH FROM EMPLOYEE WHERE BIRTHDATE > (TO_DATE(BIRTHYEAR,'YYYY')) )
        LOOP
        L_EMPS.EXTEND(); /*Extend(): Allocates one element space.*/
        N:=N+1;
        L_EMPS(N) :=EMP_OBJECT(i.EMP_NAME,i.BIRTH);
        END LOOP;
    RETURN L_EMPS;
END;
/

SELECT * FROM TABLE(BORN_AFTER_DATE(1968));

--4.1
CREATE OR REPLACE PROCEDURE NAMES (N OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN N FOR 
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END NAMES;
/

DECLARE
N SYS_REFCURSOR;
FIRSTNAME CUSTOMER.FIRSTNAME%TYPE;
LASTNAME CUSTOMER.LASTNAME%TYPE;
BEGIN
    NAMES(N);
    LOOP
    FETCH N INTO FIRSTNAME, LASTNAME;
    EXIT WHEN N%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
    END LOOP
    CLOSE;
END;
/

SET SERVEROUTPUT ON;


--4.2
CREATE OR REPLACE PROCEDURE UP_EMP
    (EMP_ID IN EMPLOYEE.EMPLOYEEID%TYPE, F_NAME IN EMPLOYEE.FIRSTNAME%TYPE, L_NAME IN EMPLOYEE.LASTNAME%TYPE, TIT IN TITLE%TYPE, MAN IN REPORTSTO%TYPE,
    BOD IN EMPLOYEE.BIRTHDATE%TYPE, H_DATE IN EMPLOYEE.HIREDATE%TYPE, ADDST IN EMPLOYEE.ADDRESS%TYPE, C IN EMPLOYEE.CITY%TYPE, S IN EMPLOYEE.STATE%TYPE,
    COUN IN EMPLOYEE.COUNTRY%TYPE, P_C IN EMPLOYEE.POSTALCODE%TYPE, PH IN EMPLOYEE.PHONE%TYPE, FX IN EMPLOYEE.FAX%TYPE, EMAL IN EMPLOYEE.EMAIL%TYPE);
    IS
BEGIN
UPDATE EMPLOYEE SET( EMPLOYEEID = EMP_ID, FIRSTNAME = F_NAME, LASTNAME = L_NAME, TITLE = TIT, REPOSTSTO = MAN,
    BIRTHDATE = BOD, HIREDATE = H_DATE, ADDRESS = ADDST, CITY = C, STATE = S, COUNTRY = COUN, POSTALCODE = P_C,
    PHONE = PH , FAX = FX, EMAIL = EMAL);
END;
/
SELECT FIRSTNAME||' '||LASTNAME||' ''s Address is '||ADDRESS||' '||CITY||', '||STATE||' '||POSTALCODE||' '||COUNTRY||
' with phone # '||PHONE||' and fax # '||FAX FROM EMPLOYEE WHERE EMPLOYEEID = 8;
-- SHOWS THE ADDRESS BEFORE THE CHANGE
EXECUTE UP_EMP(15,'6724 DORY RD', 'NEW YORK CITY', 'NY', 96754, 'USA', '(657) 958-2547', '(657) 453- 6512');
SELECT FIRSTNAME||' '||LASTNAME||' ''s Address is '||ADDRESS||' '||CITY||', '||STATE||' '||
POSTALCODE||' '||COUNTRY||' with phone # '||PHONE||' and fax # '||FAX FROM EMPLOYEE WHERE EMPLOYEEID = 8; -- SHOWS THE ADDRESS AFTER THE CHANGE

CREATE OR REPLACE PROCEDURE MANAGER_EMP
(R OUT SYS_REFCURSOR)
AS
BEGIN
OPEN R FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE WHERE TITLE LIKE '% Manager %';
END MANAGER_EMP;
/
DECLARE
R SYS_REFCURSOR;
FIRSTNAME CUSTOMER.FIRSTNAME%TYPE;
LASTNAME CUSTOMER.LASTNAME%TYPE;
BEGIN
	MANAGER_EMP(R);
	LOOP
	FETCH R INTO FIRSTNAME, LASTNAME;
	EXIT WHEN R%NOTFOUND; -- BREAK OUT OF THE LOOP WHEN NO MORE ROWS ARE AVAILABLE
	DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' IS FIRST NAME, ' ||LASTNAME||' IS LAST NAME');
END LOOP
CLOSE;
END;
/
SET SERVEROUTPUT ON;

--4.3
CREATE OR REPLACE PROCEDURE STOR_COMP
(F OUT SYS_REFCURSOR)
AS
    BEGIN
        OPEN F FOR
            SELECT COMPANY FROM CUSTOMER WHERE CUSTOMERID LIKE '% Customer %';
    END STOR_COMP;
/
DECLARE
F SYS_REFCURSOR;
COMPANY CUSTOMER.COMPANY%TYPE;
BEGIN
	STOR_COMP(F);
	LOOP
	FETCH F INTO COMPANY;
	EXIT WHEN F%NOTFOUND; -- BREAK OUT OF THE LOOP WHEN NO MORE ROWS ARE AVAILABLE
	DBMS_OUTPUT.PUT_LINE(COMPANY||' COMPANY NAME ');
END LOOP
CLOSE;
END;
/
SET SERVEROUTPUT ON;

--5.0
CREATE OR REPLACE PROCEDURE DELETE_TRANSACTION(
       I_INVOICEID IN INVOICE.INVOICEID%TYPE)
IS
BEGIN
COMMIT;
DELETE FROM INVOICELINE
WHERE INVOICEID IN(
SELECT INVOICEID FROM INVOICE
WHERE I_INVOICEID = INVOICEID);
DELETE FROM INVOICE
WHERE I_INVOICEID = INVOICEID;
COMMIT;
END;
/
EXECUTE  DELETE_TRANSACTION(2);
    
CREATE OR REPLACE PROCEDURE N_RECORD
(C_ID IN CUSTOMERID%TYPE, F_NAME IN FIRSTNAME%TYPE, L_NAME IN LASTNAME%TYPE, COMPY IN COMPANY%TYPE, ADRES IN ADDRESS%TYPE, CIT IN CITY%TYPE,
S_E IN STATE%TYPE, COUN IN COUNTRY%TYPE, POS_C IN POSTALCODE%TYPE, PH IN PHONE%TYPE, F_X IN FAX, E_L IN EMAIL%TYPE, SU_ID IN SUPPORTREPID%TYPE);
IS
BEGIN
    BEGIN TRANSACTION;
    SAVE TRANSACTION FIRSTSAVEPOINT;
    SET C_ID = '60';
    SET F_NAME = 'SWING';
    SET L_NAME = 'DAVIS';
    SET COMPY = 'H&R';
    SET ADRES = '32434 Ssdts';
    SET CIT = 'SANTA FE';
    SET S_E = 'NM';
    SET COUN = 'USA';
    SET POS_C = '97856';
    SET PH = '1(543)876-4532';
    SET F_X = '(464)897-3456';
    SET E_L = 'wrtsdt@nm.edu';
    SET SU_ID = 3;
    BEGIN 
    UPDATE CUSTOMER SET( CUSTOMERID = C_ID, FIRSTNAME = F_NAME, LASTNAME = L_NAME, COMPANY = COMPY, ADDRESS = ADRES, CITY = CIT, STATE = S_E,
    COUNTRY = COMPY, POSTALCODE = POS_C, PHONE = PH, FAX = F_X, EMAIL = E_L, SUPPORTREPID = SU_ID);
    
    INSERT INTO CUSTOMER VALUES(60,'SWING','DAVIS','H&R','32434 Ssdts','SANTA FE','NM','USA','97856','1(543)876-4532','(464)897-3456','wrtsdt@nm.edu',3);
END
BEGIN
    IF SUPPORTREPID > 0
        BEGIN
            ROLLBACK TRANSACTION FIRSTSAVEPOINT;
        END
    END
    COMMIT TRANSACTION
END;
/
EXECUTE N_RECORD(60,'SWING','DAVIS','H&R','32434 Ssdts','SANTA FE','NM','USA','97856','1(543)876-4532','(464)897-3456','wrtsdt@nm.edu',3);
SELECT * FROM CUSTOMER;

--6.1
CREATE OR REPLACE TRIGGER MYTRIGGER AFTER INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
    BEGIN
        INSERT INTO EMPLOYEE VALUES(12,'DARTH','ULTIS','GAURD',1,'09-SEP-29','02-SEP-12','867465 CAREM DR','TOC','NM','USA',70482,'(575)102-3425','(321)456-7897','sersdf@gmail.com');
    END;
/

SELECT * FROM EMPLOYEE WHERE EMPLOYEEID = '12';

CREATE OR REPLACE TRIGGER AFTER_UPDATE AFTER UPDATE ON ALBUM
FOR EACH ROW
DECLARE
    BEGIN
        UPDATE ALBUM SET ARTISTID = 300 WHERE ARTISTID = 104;
    END;
/
SELECT ARTISTID FROM ALBUM WHERE ARTISTID = '104';

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
   FOR EACH ROW
        BEGIN
            DBMS_OUTPUT.PUT_LINE('Customer Removed!');
        END TR_DELETE_CUSTOMER;
/
DELETE FROM INVOICELINE 
WHERE INVOICEID IN
   (SELECT INVOICEID FROM INVOICE ---INVOICEID IS A FK 
   WHERE CUSTOMERID =12);
DELETE FROM INVOICE
   WHERE CUSTOMERID =12;
 
--7.1
SELECT FIRSTNAME, LASTNAME
FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICEID, TOTAL FROM CUSTOMER FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3
SELECT ARTIST.NAME,TITLE FROM ALBUM RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME ASC;

--7.5
SELECT * FROM EMPLOYEE A, EMPLOYEE B WHERE A.REPORTSTO = B.EMPLOYEEID; 
