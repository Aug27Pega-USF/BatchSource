
CREATE TABLE USER_INFO (
USER_ID NUMBER(10),
USERNAME VARCHAR2(50),
PASSWORD VARCHAR2(50),
FIRSTNAME VARCHAR2(100),
LASTNAME VARCHAR2(100),
CONSTRAINT PK_USER PRIMARY KEY (USER_ID)
);

CREATE SEQUENCE SQ_USER_INFO
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER USER_INFO_INSERT
BEFORE INSERT ON USER_INFO
FOR EACH ROW
BEGIN
    SELECT SQ_USER_INFO.NEXTVAL INTO  :NEW.USER_ID FROM DUAL;--inserting the next increment from the seq into the new user on the userid field
END;
/

CREATE TABLE BANK_ACCOUNT (
BANK_ACCOUNT_ID NUMBER(10),
ACCOUNT_NUMBER NUMBER(20),
USER_ID NUMBER(10),
SAVING_BALANCE NUMBER(10,2),
CHECKING_BALANCE NUMBER(10,2),
CONSTRAINT PK_BANK_ACCOUNT PRIMARY KEY (BANK_ACCOUNT_ID)
);

--ADD FK CONSTRAINT BANK_A
---ALTER TABLE BANK_ACCOUNT DROP CONSTRAINT FK_BANK_ACCOUNTUSERID;
ALTER TABLE BANK_ACCOUNT ADD CONSTRAINT FK_BANK_ACCOUNTUSERID
     FOREIGN KEY (USER_ID) REFERENCES USER_INFO (USER_ID) ON DELETE CASCADE;

CREATE SEQUENCE SQ_BANK_ACCOUNT
START WITH 1 
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER BANK_ACCOUNT_INSERT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_BANK_ACCOUNT.NEXTVAL INTO  :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;
/

CREATE TABLE ADMINI (
ADMIN_ID NUMBER(10),
ADMIN_USERNAME VARCHAR2(50),
ADMIN_PASSWORD VARCHAR2(50),
ADMIN_FIRSTNAME VARCHAR2(100),
CONSTRAINT PK_ADMINI PRIMARY KEY (ADMIN_ID)
);

     
CREATE SEQUENCE SQ_ADMINI
START WITH 1 
INCREMENT BY 1;

CREATE TABLE TRANSACTION (
TRANS_ID NUMBER(10),
USER_ID NUMBER(10),
DEPOSIT NUMBER(10,2),
WITHDRAWAL NUMBER(10,2),
BALANCE_CHECK NUMBER(10,2),
TRANS_DATE DATE,
CONSTRAINT PK_TRANSACTION PRIMARY KEY (TRANS_ID)
);

CREATE SEQUENCE SQ_TRANSACTION
START WITH 1 
INCREMENT BY 1;

--ADD FK CONSTRAINT TO TRANS
ALTER TABLE TRANSACTION ADD CONSTRAINT FK_TRANSACTIONUSERID
     FOREIGN KEY (USER_ID) REFERENCES USER_INFO (USER_ID);
     
--STORES PROCEDURES
--INSERTION INTO USER_INFO TABLE

CREATE OR REPLACE PROCEDURE INSERTUSER_INFO
(UNAME IN VARCHAR2, UPAS IN VARCHAR2, FN IN VARCHAR2, LN IN VARCHAR2)
AS
BEGIN
    INSERT INTO USER_INFO VALUES(SQ_USER_INFO.NEXTVAL, UNAME,UPAS,FN,LN);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE INSERTADMIN_INFO
(AUNAME IN VARCHAR2, AUPAS IN VARCHAR2, AFN IN VARCHAR2)
AS
BEGIN
    INSERT INTO ADMINI VALUES(SQ_ADMINI.NEXTVAL, AUNAME,AUPAS,AFN);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE INSERTBANK_ACCOUNT
(ANUM IN NUMBER, UID IN NUMBER, SAVI IN NUMBER, CHEK IN NUMBER)
AS
BEGIN
    INSERT INTO BANK_ACCOUNT VALUES(SQ_BANK_ACCOUNT.NEXTVAL, ANUM,UID,SAVI,CHEK);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DEPOSIT_INTO_SAVING
(ANUM IN NUMBER, AMT IN NUMBER)
AS
BEGIN
    UPDATE BANK_ACCOUNT SET SAVING_BALANCE = SAVING_BALANCE + AMT WHERE ACCOUNT_NUMBER = ANUM;
    COMMIT;
END;
/
--checking deposit
CREATE OR REPLACE PROCEDURE DEPOSIT_INTO_CHECKING
(ANUM IN NUMBER, AMT IN NUMBER)
AS
BEGIN
    UPDATE BANK_ACCOUNT SET CHECKING_BALANCE = CHECKING_BALANCE + AMT WHERE ACCOUNT_NUMBER = ANUM;
    COMMIT;
END;
/

--update user info
CREATE OR REPLACE PROCEDURE UPDATE_USER_INFO
(UID IN NUMBER, UNA IN VARCHAR2, UPASS IN VARCHAR2, UFNAME IN VARCHAR2, ULNAME IN VARCHAR2)
AS
BEGIN
    UPDATE USER_INFO SET USERNAME=UNA,PASSWORD=UPASS,FIRSTNAME=UFNAME,LASTNAME=ULNAME WHERE USER_ID = UID;
    COMMIT;
END;
/
--QUERY TO CHECK MY TABLE
SELECT * FROM BANK_ACCOUNT;

SELECT * FROM USER_INFO;

SELECT * FROM ADMINI;

